{"version":3,"file":"static/js/766.edd34766.chunk.js","mappings":"+JACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAyG,0BCAzG,EAAuG,wBAAvG,EAA6K,wB,mBCGvKA,EAAM,SAACC,GAAD,OAAkBA,EAAQC,SAAWC,EAAWA,GAkB5D,EAVoC,SAACC,GACjC,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gBAAKC,UAAWJ,EAAhB,UACI,SAAC,KAAD,CAASK,GAAIH,EAAME,UAAWP,EAA9B,SAAoCI,EAAMK,UChBtD,EAAuG,wBCcvG,EANqC,SAACL,GAClC,OACI,gBAAKG,UAAWJ,EAAhB,SAA2BC,EAAMM,W,UCVzC,EAAkC,oCAAlC,EAAgF,4BAAhF,EAA4H,kC,SCUtHC,EAAqBC,EAAAA,KAAaC,MAAM,CAC1CC,WAAYF,EAAAA,KACPG,IAAI,EAAG,cACPC,IAAI,IAAK,aACTC,SAAS,gBAILC,EAAuC,SAACd,GAQjD,OAAO,0BACH,SAAC,KAAD,CACIe,cAAe,CAACL,WAAY,IAC5BM,iBAAkBT,EAClBU,SAVO,SAACC,EAAD,GAA8F,IAAxEC,EAAuE,EAAvEA,cACjCnB,EAAMoB,UAAUF,EAAOR,YACvBS,GAAc,GACdD,EAAOR,WAAa,IAIpB,SAKK,gBAAEW,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,OAAhB,OACG,UAAC,KAAD,YACI,4BACI,SAAC,KAAD,CAAOC,GAAG,WAAWlB,KAAK,aAAamB,YAAY,qBAC5CrB,UAAS,uBAAmBmB,EAAOZ,WAAcX,EAAkB,OAC1E,iBACCuB,EAAOZ,aAAc,gBAAKP,UAAWJ,EAAhB,SAAoCuB,EAAOZ,iBAErE,kBACA,mBAAQP,UAAWJ,EAAW0B,KAAK,SAASC,SAAUL,EAAtD,2BCLpB,EAxBqC,SAACrB,GAElC,IAAI2B,EAAQ3B,EAAM4B,aACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAQ3B,KAAM2B,EAAE3B,KAAiBH,GAAI8B,EAAE9B,IAAZ8B,EAAE9B,OACtE+B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAS7B,QAAS6B,EAAE7B,SAAc6B,EAAEjC,OAMnF,OACI,iBAAKC,UAAWJ,EAAhB,WACI,gBAAKI,UAAWJ,EAAhB,SACK8B,KAEL,iBAAK1B,UAAWJ,EAAhB,UACKkC,GACD,SAACnB,EAAD,CAAaM,UAXP,SAACgB,GACfpC,EAAMqC,UAAUD,a,6BCmBxB,OAAeE,E,QAAAA,KAA8BC,EAAAA,EAAAA,KAtBvB,SAACZ,GACnB,MAAO,CACHC,aAAcD,EAAMC,gBAqBpB,CAAES,UAAWG,EAAAA,EAAAA,aAjBrB,SAAoBC,GAYhB,OAXA,SAAiCzC,GAC7B,IAAI0C,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACb,OACI,SAACN,GAAD,kBACQzC,GADR,IAEIgD,OAAQ,CAAEN,SAAAA,EAAUE,SAAAA,EAAUE,OAAAA,SAQ9C,CACyDG","sources":["webpack://my-les/./src/components/Navbar/Dialogs/Dialogs.module.css?ba1e","webpack://my-les/./src/components/Navbar/Dialogs/gialog1/Dialog1.module.css?db6c","components/Navbar/Dialogs/gialog1/Dialog1.tsx","webpack://my-les/./src/components/Navbar/Dialogs/gialog1/massage/Message.module.css?c52c","components/Navbar/Dialogs/gialog1/massage/Message.tsx","webpack://my-les/./src/components/Navbar/Dialogs/FormDialog/FormDialog.module.css?4510","components/Navbar/Dialogs/FormDialog/FormDialogs.tsx","components/Navbar/Dialogs/Dialogs.tsx","components/Navbar/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__tzAmJ\",\"dialogsItem\":\"Dialogs_dialogsItem__iFsXs\",\"messages\":\"Dialogs_messages__nmtNN\",\"dialog\":\"Dialogs_dialog__z48h9\",\"active\":\"Dialogs_active__9lqWc\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialog1_dialogs__BpA+s\",\"dialogsItem\":\"Dialog1_dialogsItem__1QUBs\",\"dialog\":\"Dialog1_dialog__8kMDa\",\"messages\":\"Dialog1_messages__lafaW\",\"active\":\"Dialog1_active__cQKY9\"};","import * as React from \"react\";\r\nimport s from \"./Dialog1.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst act = (navData: any) => navData.isActive ? s.active : s.dialog\r\n\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst Dialog: React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} className={act}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Message_dialogs__2E020\",\"dialogsItem\":\"Message_dialogsItem__if93O\",\"dialog\":\"Message_dialog__EISLA\",\"messages\":\"Message_messages__a3Jur\"};","import * as React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\n//const act = (navData: any) => navData.isActive ? s.active : s.dialog\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"formDialogError\":\"FormDialog_formDialogError__e7pll\",\"sendBut\":\"FormDialog_sendBut__oVZgp\",\"formErrorArea\":\"FormDialog_formErrorArea__vHULb\",\"textarea\":\"FormDialog_textarea__ozbjp\"};","import React from \"react\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport s from \"./FormDialog.module.css\";\r\nimport * as Yup from \"yup\";\r\n\r\ntype ValuesType = {\r\n    areaDialog: string\r\n}\r\ntype FormPropsType = {\r\n    addNewMes: (values: string) => void\r\n}\r\nconst DisplayingErrorMes = Yup.object().shape({\r\n    areaDialog: Yup.string()\r\n        .min(0, 'Too Short!')\r\n        .max(100, 'Too Long!')\r\n        .required('Too Short!'),\r\n});\r\n\r\n\r\nexport const FormDialogs: React.FC<FormPropsType> = (props) => {\r\n\r\n    let onSubmit = (values: ValuesType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        props.addNewMes(values.areaDialog)\r\n        setSubmitting(false)\r\n        values.areaDialog = ''\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            initialValues={{areaDialog: ''}}\r\n            validationSchema={DisplayingErrorMes}\r\n            onSubmit={onSubmit}\r\n        >\r\n            {({isSubmitting, errors}) => (\r\n                <Form>\r\n                    <div>\r\n                        <Field as=\"textarea\" name=\"areaDialog\" placeholder='Enter message here'\r\n                               className={`s.textarea + ${(errors.areaDialog) ? s.formErrorArea : ''}`}/>\r\n                        <p></p>\r\n                        {errors.areaDialog && <div className={s.formDialogError}>{errors.areaDialog}</div>}\r\n                    </div>\r\n                    <p></p>\r\n                    <button className={s.sendBut} type=\"submit\" disabled={isSubmitting}>\r\n                        Send\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport Dialog from \"./gialog1/Dialog1\";\r\nimport Message from \"./gialog1/massage/Message\";\r\nimport {initialStateType} from \"../../../redax/dialogs-reducer\";\r\nimport {FormDialogs} from \"./FormDialog/FormDialogs\";\r\n\r\n\r\ntype PropsType = {\r\n    messagesPage: initialStateType,\r\n    addMesKey: (newMesText: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let state = props.messagesPage  // dialogsPage\r\n    let dialogsElements = state.dialogs.map(d => <Dialog name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />)\r\n\r\n    const addNewMes = (value: string) => {\r\n        props.addMesKey(value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <FormDialogs addNewMes={addNewMes} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n//import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\n//import {maxSymbol20, required} from \"../../../utils/validators/validators\";\r\n//import {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n{/*<DialogsReduxForm onSubmit={ addNewMes } />*/}\r\n//const maxSymbolValidate = maxSymbol20(100)\r\n// type DialogsOwnPropsType = {}\r\n//\r\n// const DialogForm: React.FC<InjectedFormProps<NewMessageFormType, DialogsOwnPropsType> & DialogsOwnPropsType> = (props) => {\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit}>\r\n//             <Field placeholder='Enter message here' component={Textarea}\r\n//                    validate={[required, maxSymbolValidate ]} name='newMesText' /><p></p>\r\n//             <button>Add message</button>\r\n//         </form>\r\n//         )\r\n// }\r\n//\r\n// const DialogsReduxForm = reduxForm<NewMessageFormType, DialogsOwnPropsType>({form: 'dialog'})(DialogForm)","import * as React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate, useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {actions, initialStateType} from \"../../../redax/dialogs-reducer\";\r\nimport {AppStateType} from \"../../../redax/redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\ntype mapStateType = {\r\n    messagesPage: initialStateType\r\n}\r\ntype mapDispatchType = {\r\n    addMesKey: (newMesText: string) => void\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        messagesPage: state.messagesPage\r\n    }\r\n}\r\n\r\nfunction withRouter(Component: any) {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>( connect<mapStateType, mapDispatchType, {}, AppStateType> (mapStateToProps,\r\n        { addMesKey: actions.addMesKey }),  withRouter) (Dialogs)\r\n\r\n\r\n\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(DialogsContainer)\r\n\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n//\r\n// export default connect (mapStateToProps, { addMesKey, updateNewMesTextActionCreator }) (WithUrlDataContainerComponent);\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         addMesDispatch: () => {\r\n//             dispatch(addMesKey())\r\n//         },\r\n//         updateNewMesTextActionCreator: (text) => {\r\n//             dispatch(updateNewMesTextActionCreator(text))\r\n//         }\r\n//     }\r\n// }"],"names":["act","navData","isActive","s","props","path","id","className","to","name","message","DisplayingErrorMes","Yup","shape","areaDialog","min","max","required","FormDialogs","initialValues","validationSchema","onSubmit","values","setSubmitting","addNewMes","isSubmitting","errors","as","placeholder","type","disabled","state","messagesPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","value","addMesKey","compose","connect","actions","Component","location","useLocation","navigate","useNavigate","params","useParams","router","Dialogs"],"sourceRoot":""}