{"version":3,"file":"static/js/342.3f277b87.chunk.js","mappings":"uMACA,EAA0B,0BAA1B,EAA6D,yBAA7D,EAAgG,0BAAhG,EAAiI,uBCAjI,EAAuB,mB,SCcvB,EANkC,SAACA,GAC/B,OACI,gBAAKC,QAASD,EAAME,WAAYC,UAAWC,EAA3C,SAAoDJ,EAAMK,WC2ElE,EArEsC,SAACL,GAEnC,IAcIE,EAAa,SAACI,GAEd,IADA,IAAIC,EAAOD,EAAEE,cAAcC,UAClBC,EAAE,EAAGA,EAAEV,EAAMW,KAAKC,OAAQF,IAC5BV,EAAMW,KAAKD,GAAGL,UAAYE,GACzBP,EAAMW,KAAKE,OAAOH,EAAG,IAK7BI,EAAed,EAAMW,KAAKI,KAAI,SAAAC,GAAC,OAAIA,EAAEX,QAAQO,OAAS,EAAI,IAC1D,SAAC,EAAD,CAAMV,WAAaA,EAAaG,QAASW,EAAEX,SAAcW,EAAEC,OAW/D,OACI,iBAAKd,UAAWC,EAAhB,WACI,sCACA,8CACA,0BACI,oBAAQc,SAxCD,SAACZ,GAChBN,EAAMmB,YAAYb,EAAEc,OAAOC,QAuCeC,KAAK,SAASL,GAAG,SAASd,UAAWC,EAAvE,WACI,mBAAQiB,MAAM,YAAd,wBACA,mBAAQA,MAAM,SAAd,qBACA,mBAAQA,MAAM,QAAd,oBACA,mBAAQA,MAAM,SAAd,0BAIR,gBAAKlB,UAAWC,EAAhB,UACI,qBAAUD,UAAWC,EAAQc,SAzCtB,SAACZ,GAChB,IAAIiB,EAAOjB,EAAEc,OAAOC,MACpBrB,EAAMwB,WAAWD,IAuC8CF,MAAOrB,EAAMyB,YAExE,0BACI,mBAAQxB,QAhDN,SAACK,GACXN,EAAM0B,WA+CE,yBAEJ,yBACMZ,KAEN,0BACI,mBAAQb,QA/BC,SAACK,GAEc,QAAhCA,EAAEE,cAAcmB,YACV3B,EAAM4B,mBACN5B,EAAM6B,qBA2BJ,SAAqC7B,EAAM8B,OACrC,MACA,a,mBCxDhBC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAaD,OAbCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MAGF,WAEI,OACI,SAAC,EAAD,CAAWZ,YAAaa,KAAKhC,MAAMmB,YACxBO,QAASM,KAAKhC,MAAM0B,QAASF,WAAYQ,KAAKhC,MAAMwB,WACpDb,KAAMqB,KAAKhC,MAAMW,KAAMc,OAAQO,KAAKhC,MAAMyB,OAAQK,OAAQE,KAAKhC,MAAM8B,OACrEF,iBAAkBI,KAAKhC,MAAM4B,iBAC7BC,kBAAmBG,KAAKhC,MAAM6B,wBAGhD,EAbCE,CAA0BE,EAAAA,WAyBhC,GAAeC,EAAAA,EAAAA,KATO,SAACC,GACnB,MAAO,CACHC,gBAAiBD,EAAME,SAASD,gBAChCzB,KAAMwB,EAAME,SAAS1B,KACrBc,OAAQU,EAAME,SAASZ,OACvBK,OAAQK,EAAME,SAASP,UAK3B,CAAEX,YAAamB,EAAAA,EAAAA,YAAqBd,WAAYc,EAAAA,EAAAA,WAAoBZ,QAASY,EAAAA,EAAAA,QACzEV,iBAAkBU,EAAAA,EAAAA,iBAA0BT,kBAAmBS,EAAAA,EAAAA,mBAFvE,CAGOP","sources":["webpack://my-les/./src/components/Navbar/Settings/Settings.module.css?8599","webpack://my-les/./src/components/Navbar/Settings/Note/Note.module.css?d618","components/Navbar/Settings/Note/Note.tsx","components/Navbar/Settings/Settings.tsx","components/Navbar/Settings/SettingsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Settings_content__B95s0\",\"colors\":\"Settings_colors__GrdPl\",\"areaBox\":\"Settings_areaBox__GMq+X\",\"area\":\"Settings_area__YENde\"};","// extracted by mini-css-extract-plugin\nexport default {\"note\":\"Note_note__73cXV\"};","import React, {Key, SyntheticEvent} from \"react\";\r\nimport s from \"./Note.module.css\"\r\nimport {noteType} from \"../../../../redax/setting-reducer\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n    deleteNote: (e: SyntheticEvent<HTMLDivElement>) => void\r\n}\r\n\r\nconst Note: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div onClick={props.deleteNote} className={s.note}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Note","import React, {SyntheticEvent} from \"react\";\r\nimport s from \"./Settings.module.css\";\r\nimport Note from \"./Note/Note\";\r\nimport {noteType} from \"../../../redax/setting-reducer\";\r\nimport {ChangeEvent} from \"react\";\r\n\r\ntype PropsType = {\r\n    changeColor: (value: string) => void\r\n    changeButtonTrue: () => void\r\n    changeButtonFalse: () => void\r\n    updateNote: (text: string) => void\r\n    note: Array<noteType>\r\n    addNote: () => void\r\n    button: boolean\r\n    status: string\r\n}\r\n\r\nconst Settings: React.FC<PropsType> = (props) => {\r\n\r\n    let changeColors = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        props.changeColor(e.target.value)\r\n    }\r\n\r\n    let addNote = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        props.addNote()\r\n    }\r\n\r\n    let onChangeText = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.target.value\r\n        props.updateNote(text)\r\n    }\r\n\r\n\r\n    let deleteNote = (e: SyntheticEvent<HTMLDivElement>) => {\r\n        let node = e.currentTarget.innerText\r\n        for (let i=0; i<props.note.length; i++){\r\n            if(props.note[i].message === node){\r\n                props.note.splice(i, 1)\r\n            }\r\n        }\r\n    }\r\n    //console.log(props.note[0])\r\n    let noteElements = props.note.map(m => m.message.length < 1 ? '' :\r\n        <Note deleteNote={ deleteNote } message={m.message} key={m.id}/>)\r\n\r\n\r\n    let onChangeButton = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n\r\n        e.currentTarget.textContent === 'Yes'\r\n            ? props.changeButtonTrue()\r\n            : props.changeButtonFalse()\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <h1>Settings</h1>\r\n            <h3>Background color</h3>\r\n            <div>\r\n                <select onChange={ changeColors } name='colors' id='colors' className={s.colors}>\r\n                    <option value=\"lightpink\">lightpink</option>\r\n                    <option value=\"violet\">violet</option>\r\n                    <option value=\"green\">green</option>\r\n                    <option value=\"yellow\">yellow</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className={s.areaBox}>\r\n                <textarea className={s.area} onChange={ onChangeText } value={props.status}></textarea>\r\n            </div>\r\n            <div>\r\n                <button onClick={ addNote }>ADD NOTE</button>\r\n            </div>\r\n            <div>\r\n                { noteElements }\r\n            </div>\r\n            <div>\r\n                <button onClick={ onChangeButton } >{props.button\r\n                    ? 'Yes'\r\n                    : 'No'}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Settings;","import * as React from \"react\";\r\nimport Settings from \"./Settings\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {actions, noteType} from \"../../../redax/setting-reducer\";\r\nimport {AppStateType} from \"../../../redax/redux-store\";\r\n\r\ntype MapStateProps = {\r\n    backgroundColor: string,\r\n    note: Array<noteType>,\r\n    status: string,\r\n    button: boolean\r\n}\r\ntype MapDispatchProps = {\r\n    changeColor: (value: string) => void,\r\n    addNote: () => void,\r\n    updateNote: (text: string) => void,\r\n    changeButtonTrue: () => void,\r\n    changeButtonFalse: () => void,\r\n\r\n}\r\ntype Props = MapStateProps & MapDispatchProps\r\n\r\nclass SettingsContainer extends React.Component<Props> {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Settings  changeColor={this.props.changeColor}\r\n                       addNote={this.props.addNote} updateNote={this.props.updateNote}\r\n                       note={this.props.note} status={this.props.status} button={this.props.button}\r\n                       changeButtonTrue={this.props.changeButtonTrue}\r\n                       changeButtonFalse={this.props.changeButtonFalse}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        backgroundColor: state.settings.backgroundColor,\r\n        note: state.settings.note,\r\n        status: state.settings.status,\r\n        button: state.settings.button\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps,\r\n    { changeColor: actions.changeColor, updateNote: actions.updateNote, addNote: actions.addNote,\r\n        changeButtonTrue: actions.changeButtonTrue, changeButtonFalse: actions.changeButtonFalse\r\n    })(SettingsContainer)\r\n\r\n\r\n"],"names":["props","onClick","deleteNote","className","s","message","e","node","currentTarget","innerText","i","note","length","splice","noteElements","map","m","id","onChange","changeColor","target","value","name","text","updateNote","status","addNote","textContent","changeButtonTrue","changeButtonFalse","button","SettingsContainer","this","React","connect","state","backgroundColor","settings","actions"],"sourceRoot":""}