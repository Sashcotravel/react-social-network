{"version":3,"file":"static/js/761.653542e6.chunk.js","mappings":"gOAIIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,0IAEvC,WACI,OAAIC,KAAKC,MAAMN,QAER,SAACG,GAAD,UAAgBE,KAAKC,SAFE,SAAC,KAAD,CAAUC,GAAI,eAHT,GACXC,EAAAA,WAUhC,OAFqCC,EAAAA,EAAAA,IAAQX,EAARW,CAAqCL,K,2IChB9E,EAA0B,yBAA1B,EAAiE,6BAAjE,EAAyG,0BCAzG,EAAuG,wBAAvG,EAA6K,wB,mBCGvKM,EAAM,SAACC,GAAD,OAAaA,EAAQC,SAAWC,EAAWA,GAYvD,EAVe,SAACP,GACZ,IAAIQ,EAAO,YAAcR,EAAMS,GAE/B,OACI,gBAAKC,UAAWH,EAAhB,UACI,SAAC,KAAD,CAASN,GAAIO,EAAME,UAAWN,EAA9B,SAAoCJ,EAAMW,UCVtD,EAAuG,wBCUvG,EANgB,SAACX,GACb,OACI,gBAAKU,UAAWH,EAAhB,SAA2BP,EAAMY,W,uCCCnCC,GAAoBC,EAAAA,EAAAA,GAAY,KAmChCC,GAAmBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,UAAjBD,EAVN,SAAChB,GAChB,OACI,kBAAMkB,SAAUlB,EAAMmB,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,YAAY,qBAAqBC,UAAWC,EAAAA,EAC5CC,SAAU,CAACC,EAAAA,EAAUZ,GAAqBF,KAAK,gBAAe,kBACrE,kDAOZ,EAnCgB,SAACX,GAEb,IAAIP,EAAQO,EAAM0B,aACdC,EAAkBlC,EAAMmC,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAQnB,KAAMmB,EAAEnB,KAAiBF,GAAIqB,EAAErB,IAAZqB,EAAErB,OACtEsB,EAAmBtC,EAAMuC,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASrB,QAASqB,EAAErB,SAAcqB,EAAExB,OAMnF,OACI,iBAAKC,UAAWH,EAAhB,WACI,gBAAKG,UAAWH,EAAhB,SACKoB,KAEL,iBAAKjB,UAAWH,EAAhB,UACKwB,GACD,SAAChB,EAAD,CAAkBG,SAXZ,SAACgB,GACflC,EAAMmC,eAAeD,EAAME,sB,uCCR7BC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAgBD,OAhBCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MAMF,WAEI,OAEI,SAAC,EAAD,CAASX,aAAc3B,KAAKC,MAAM0B,aACzBS,eAAgBpC,KAAKC,MAAMsC,UAC3BC,8BAA+BxC,KAAKC,MAAMuC,8BAC1CH,WAAYrC,KAAKC,MAAMoC,iBAGvC,EAhBCC,CAAyBnC,EAAAA,WA0C/B,OAAesC,EAAAA,EAAAA,KACXrC,EAAAA,EAAAA,KAvBkB,SAACV,GACnB,MAAO,CACHiC,aAAcjC,EAAMiC,aACpBU,WAAY3C,EAAMiC,aAAaU,cAoBT,CAAEE,UAAAA,EAAAA,KAhBhC,SAAoBzC,GAYhB,OAXA,SAAiCG,GAC7B,IAAIyC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACb,OACI,SAACjD,GAAD,kBACQG,GADR,IAEI+C,OAAQ,CAAEN,SAAAA,EAAUE,SAAAA,EAAUE,OAAAA,SAU1CjD,EAAAA,EAHJ,CAIEyC","sources":["HOC/withAuthRedirect.js","webpack://my-les/./src/components/Navbar/Dialogs/Dialogs.module.css?ba1e","webpack://my-les/./src/components/Navbar/Dialogs/gialog1/Dialog1.module.css?db6c","components/Navbar/Dialogs/gialog1/Dialog1.jsx","webpack://my-les/./src/components/Navbar/Dialogs/gialog1/massage/Message.module.css?c52c","components/Navbar/Dialogs/gialog1/massage/Message.jsx","components/Navbar/Dialogs/Dialogs.jsx","components/Navbar/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import React, {Component} from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Navigate to={\"/login\"}/>\r\n\r\n            return <Component { ...this.props } />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__EtpkR\",\"dialogsItem\":\"Dialogs_dialogsItem__PLier\",\"messages\":\"Dialogs_messages__EBKTn\",\"dialog\":\"Dialogs_dialog__Cwb6v\",\"active\":\"Dialogs_active__6ldK5\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialog1_dialogs__Q96Qc\",\"dialogsItem\":\"Dialog1_dialogsItem__4oryg\",\"dialog\":\"Dialog1_dialog__uUtlG\",\"messages\":\"Dialog1_messages__G8YTC\",\"active\":\"Dialog1_active__FRTQO\"};","import React from \"react\";\r\nimport s from \"./Dialog1.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst act = (navData) => navData.isActive ? s.active : s.dialog\r\n\r\nconst Dialog = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} className={act}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Message_dialogs__Mmenu\",\"dialogsItem\":\"Message_dialogsItem__fiMem\",\"dialog\":\"Message_dialog__nTQmk\",\"messages\":\"Message_messages__peZ14\"};","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\nconst act = (navData) => navData.isActive ? s.active : s.dialog\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport Dialog from \"./gialog1/Dialog1\";\r\nimport Message from \"./gialog1/massage/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxSymbol20, required} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxSymbolValidate = maxSymbol20(100)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.messagesPage  // dialogsPage\r\n    let dialogsElements = state.dialogs.map(d => <Dialog name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />)\r\n\r\n    const addNewMes = (value) => {\r\n        props.addMesDispatch(value.newMesText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <DialogsReduxForm onSubmit={addNewMes} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst DialogForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder='Enter message here' component={Textarea}\r\n                   validate={[required, maxSymbolValidate ]} name='newMesText' /><p></p>\r\n            <button>Add message</button>\r\n        </form>\r\n        )\r\n}\r\n\r\nconst DialogsReduxForm = reduxForm({form: 'dialog'})(DialogForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {addMesKey, updateNewMesTextActionCreator} from \"../../../redax/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate, useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass DialogsContainer extends React.Component{\r\n\r\n    // componentDidMount(){\r\n    //\r\n    // }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <Dialogs messagesPage={this.props.messagesPage}\r\n                     addMesDispatch={this.props.addMesKey}\r\n                     updateNewMesTextActionCreator={this.props.updateNewMesTextActionCreator}\r\n                     newMesText={this.props.newMesText}\r\n            />\r\n            )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n        newMesText: state.messagesPage.newMesText,\r\n    }\r\n}\r\n\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nexport default compose(\r\n    connect (mapStateToProps, { addMesKey }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(DialogsContainer)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(DialogsContainer)\r\n\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n//\r\n// export default connect (mapStateToProps, { addMesKey, updateNewMesTextActionCreator }) (WithUrlDataContainerComponent);\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         addMesDispatch: () => {\r\n//             dispatch(addMesKey())\r\n//         },\r\n//         updateNewMesTextActionCreator: (text) => {\r\n//             dispatch(updateNewMesTextActionCreator(text))\r\n//         }\r\n//     }\r\n// }"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","act","navData","isActive","s","path","id","className","name","message","maxSymbolValidate","maxSymbol20","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","messagesPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","value","addMesDispatch","newMesText","DialogsContainer","addMesKey","updateNewMesTextActionCreator","compose","location","useLocation","navigate","useNavigate","params","useParams","router"],"sourceRoot":""}